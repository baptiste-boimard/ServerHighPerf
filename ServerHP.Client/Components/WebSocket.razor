@using System.Collections.Concurrent
@using System.Net.WebSockets
@using System.Text
@using System.Text.Json
<div>
    <h3>🧦 Test de Latence WebSocket</h3>

    <div class="card p-3 mb-4">
        <h4>Message à envoyer</h4>
        <div style="display: flex; flex-direction: row">
            <div style="display: flex; flex-direction: column; align-items: flex-start">
                <input @bind="messageText" placeholder="Entrez un message..." class="form-control" style="width: 300px; height: 100px" />
                <button @onclick="SendMessage" class="btn btn-primary mt-2">Envoyer 1 message</button>
            </div>

            <div style="display: flex; flex-direction: column; margin-left: 1rem">
                <p class="text-muted mt-1">📦 Taille du message : <strong>@MessageSizeBytes</strong> octets</p>

                @if (message != null)
                {   <div style="display: flex; flex-direction: row; gap: 1rem">
                        <p class="mt-3"><strong>Envoyé à:</strong> @message.SentAt?.ToLocalTime().ToString("HH:mm:ss.fff")</p>
                        <p><strong>Reçu à:</strong> @message.ReceivedAt?.ToLocalTime().ToString("HH:mm:ss.fff")</p>
                        <p><strong>Latence:</strong> @message.Latency?.TotalMilliseconds.ToString("F2") ms</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <h4>Simulation de X clients avec le contenu du message</h4>
    <div class="card p-3 mb-3" style="display: flex; flex-direction: row;">
        <div class="d-flex gap-2" style="width: 400px">
            <input @bind="numberOfClients" type="number" min="1" class="form-control" />
            <button @onclick="StartSimulation" class="btn btn-success">Démarrer</button>
            <button @onclick="StopSimulation" class="btn btn-danger" disabled="@(!isRunning)">Stop</button>
            <p class="mt-2">👤 Clients actifs : @activeClients</p>
            @if (receivedMessages.Count > 0)
            {
                <div class="mt-3">
                    <h6>📈 Statistiques des latences</h6>
                    <ul>
                        <li><strong>Moyenne :</strong> @AverageLatency?.ToString("F2") ms</li>
                        <li><strong>Médiane :</strong> @MedianLatency?.ToString("F2") ms</li>
                        <li><strong>Min :</strong> @MinLatency?.ToString("F2") ms</li>
                        <li><strong>Max :</strong> @MaxLatency?.ToString("F2") ms</li>
                    </ul>
                </div>
            }
        </div>
        
        <div style="margin-left: 1rem; display: flex; flex-direction: column; margin-top: -1rem">
            <p> Attention forte dégradation des performance à partir de 1000 clients</p>

            @if (isStopping)
            {
                <div class="alert alert-warning mt-2" role="alert">
                    ⏳ Arrêt en cours... Attention plus le nombre de clients est élevé, plus l'arrêt peut être long.
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    🚨 <strong>Surcharge système détectée :</strong> <br />
                    Il est possible que le serveur ne supporte pas autant de connexions simultanées.
                </div>
            }

            <div style="padding-top: 1rem">
                <h4>Simulation d'envoi de  X messages d'un coup avec le contenu du message</h4>
                <input @bind="messageCount" type="number" class="form-control" placeholder="Nombre de messages à envoyer" />
                <button class="btn btn-warning mt-2" @onclick="SendManyMessages">Envoyer X messages</button>

                @if (totalSendDuration != null)
                {
                    <div class="mt-2 alert alert-info">
                        🕒 Durée totale d'envoi de @messageCount messages : <strong>@totalSendDuration.Value.TotalSeconds.ToString("F2") s</strong>
                    </div>
                }
            </div>
        </div>
    </div>
    

    

    <div class="mt-3">
        <h6>📊 Messages reçus :</h6>
        <div style="max-height: 250px; overflow-y: auto; border: 1px solid #ccc;">
            <table class="table table-sm table-striped mb-0 text-center">
                <thead class="table-light" style="position: sticky; top: 0; background: white;">
                <tr>
                    <th scope="col" style="width: 250px">Client</th>
                    <th scope="col" style="width: 250px">Envoyé</th>
                    <th scope="col" style="width: 250px">Reçu</th>
                    <th scope="col" style="width: 250px">Latence (ms)</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var msg in receivedMessages.Take(100))
                {
                    <tr>
                        <td style="text-align: center;">@msg.Id.ToString().Substring(0, 8)</td>
                        <td style="text-align: center;">@msg.SentAt?.ToLocalTime().ToString("HH:mm:ss.fff")</td>
                        <td style="text-align: center;">@msg.ReceivedAt?.ToLocalTime().ToString("HH:mm:ss.fff")</td>
                        <td style="text-align: center;">@msg.Latency?.TotalMilliseconds.ToString("F2")</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>

    


</div>

@code {
    // Partie test unique
    private string messageText = "";
    private MessageInfoWebSocket? message;
    private ClientWebSocket? socket;
    
    private List<MessageInfoWebSocket> receivedMessages = new();
    private object listLock = new();
    private string? errorMessage = null;
    private bool isStopping = false;
    private bool isRunning = false;




    private CancellationTokenSource? cts;
    private ConcurrentDictionary<int, ClientWebSocket> clientSockets = new();
    
    private double? AverageLatency => receivedMessages.Count > 0
        ? receivedMessages.Average(m => m.Latency?.TotalMilliseconds ?? 0)
        : null;

    private double? MinLatency => receivedMessages.Count > 0
        ? receivedMessages.Min(m => m.Latency?.TotalMilliseconds ?? 0)
        : null;

    private double? MaxLatency => receivedMessages.Count > 0
        ? receivedMessages.Max(m => m.Latency?.TotalMilliseconds ?? 0)
        : null;

    private double? MedianLatency
    {
        get
        {
            var values = receivedMessages
                .Select(m => m.Latency?.TotalMilliseconds ?? 0)
                .OrderBy(v => v)
                .ToList();

            if (values.Count == 0) return null;

            if (values.Count % 2 == 0)
                return (values[values.Count / 2 - 1] + values[values.Count / 2]) / 2;
            else
                return values[values.Count / 2];
        }
    }

    // private int totalMessagesSent = 0;
    // private int totalMessagesReceived = 0;
    
    // Partie simulation
    private int numberOfClients = 10;
    private int activeClients = 0;
    private List<Task> runningClients = new();
    
    private int messageCount = 10;
    private TimeSpan? totalSendDuration = null;
    private int MessageSizeBytes => System.Text.Encoding.UTF8.GetByteCount(messageText ?? "");




    protected override async Task OnInitializedAsync()
    {
        socket = new ClientWebSocket();
        await socket.ConnectAsync(new Uri("ws://localhost:5287/ws"), CancellationToken.None);
    }

    private async Task SendMessage()
    {
        if (socket?.State == WebSocketState.Open)
        {
            var msg = new MessageInfoWebSocket
            {
                Id = Guid.NewGuid(),
                SentContent = messageText,
                SentAt = DateTime.UtcNow
            };

            var json = JsonSerializer.Serialize(msg);
            var bytes = Encoding.UTF8.GetBytes(json);

            await socket.SendAsync(new ArraySegment<byte>(bytes), WebSocketMessageType.Text, true, CancellationToken.None);

            var buffer = new byte[1024 * 4];
            using var messageStream = new MemoryStream();

            WebSocketReceiveResult result;
            do
            {
                result = await socket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                messageStream.Write(buffer, 0, result.Count);
            } while (!result.EndOfMessage);

            messageStream.Position = 0;
            using var reader = new StreamReader(messageStream, Encoding.UTF8);
            var responseJson = await reader.ReadToEndAsync();

            message = JsonSerializer.Deserialize<MessageInfoWebSocket>(responseJson);
            StateHasChanged();
        }
    }

    private async Task StartSimulation()
    {
        isStopping = false;
        isRunning = true;
        errorMessage = null;
        StateHasChanged();

        // totalMessagesSent = 0;
        // totalMessagesReceived = 0;

        lock (listLock)
        {
            receivedMessages.Clear();
        }

        runningClients = new List<Task>();
        clientSockets = new ConcurrentDictionary<int, ClientWebSocket>();
        cts = new CancellationTokenSource(); 
        activeClients = 0;

        for (int i = 0; i < numberOfClients; i++)
        {
            try
            {
                runningClients.Add(SimulateClient(i, cts.Token));
                activeClients++;
                await Task.Delay(5); // Laisse un peu de souffle
            }
            catch (Exception ex)
            {
                errorMessage = $"Erreur au démarrage du client {i} : {ex.Message}";
                break;
            }
        }

        _ = Task.WhenAll(runningClients);
    }



    private async Task SimulateClient(int clientId, CancellationToken cancellationToken)
    {
        try
        {
            var socket = new ClientWebSocket();
            await socket.ConnectAsync(new Uri("ws://localhost:5287/ws"), cancellationToken);
            clientSockets.TryAdd(clientId, socket);

            while (!cancellationToken.IsCancellationRequested)
            {
                var msg = new MessageInfoWebSocket
                {
                    Id = Guid.NewGuid(),
                    SentContent = messageText,
                    SentAt = DateTime.UtcNow
                };

                var json = JsonSerializer.Serialize(msg);
                var bytes = Encoding.UTF8.GetBytes(json);
                
                // Interlocked.Increment(ref totalMessagesSent);

                await socket.SendAsync(new ArraySegment<byte>(bytes), WebSocketMessageType.Text, true, cancellationToken);

                var buffer = new byte[1024 * 4];
                using var messageStream = new MemoryStream();

                WebSocketReceiveResult result;
                do
                {
                    result = await socket.ReceiveAsync(new ArraySegment<byte>(buffer), cancellationToken);
                    messageStream.Write(buffer, 0, result.Count);
                } while (!result.EndOfMessage);

                messageStream.Position = 0;
                using var reader = new StreamReader(messageStream, Encoding.UTF8);
                var responseJson = await reader.ReadToEndAsync();

                var received = JsonSerializer.Deserialize<MessageInfoWebSocket>(responseJson);
                
                if (received == null)
                {
                    Console.WriteLine($"❌ Erreur de désérialisation. JSON = {responseJson}");
                    continue; // Ne bloque pas la boucle
                }
                
                // Interlocked.Increment(ref totalMessagesReceived);
                
                lock (listLock)
                {
                    if (received != null)
                        receivedMessages.Insert(0, received); // Derniers en haut
                    
                    // if (receivedMessages.Count > 200) // limite "saine"
                    //     receivedMessages.RemoveAt(receivedMessages.Count - 1);
                }
                InvokeAsync(StateHasChanged);


                await Task.Delay(1000, cancellationToken);
            }
        }
        catch (OperationCanceledException)
        {
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur critique (client {clientId}) : {ex.Message}";
            Console.WriteLine($"Client {clientId} - Crash : {ex.Message}");

            if (!isStopping) // Pour éviter de déclencher plusieurs fois
            {
                StopSimulation();
            }

            InvokeAsync(StateHasChanged);
        }
        finally
        {
            if (clientSockets.TryRemove(clientId, out var socket))
            {
                await socket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Fin de simulation", CancellationToken.None);
                socket.Dispose();
            }

            activeClients--;
            InvokeAsync(StateHasChanged);
            
            if (isStopping && activeClients == 0)
            {
                isStopping = false;
                isRunning = false;
                InvokeAsync(StateHasChanged);
            }
        }
    }
    
    private void StopSimulation()
    {
        isStopping = true;
        isRunning = false;

        // Ce délai permet d'afficher le message d'arrêt en cours même si les clients chutent vite
        Task.Run(async () =>
        {
            await Task.Delay(50); // Laisse Blazor un petit temps pour rafraîchir
            InvokeAsync(StateHasChanged);
        });
        
        
        if (cts != null)
        {
            try
            {
                cts.Cancel(); // 🛡️ si pas déjà annulé
            }
            catch (ObjectDisposedException) { }

            try
            {
                cts.Dispose();
            }
            catch { }

            cts = null; // 🔁 cts sera recréé proprement dans StartSimulation()
        }

        foreach (var kv in clientSockets)
        {
            try
            {
                kv.Value.CloseAsync(WebSocketCloseStatus.NormalClosure, "Stop", CancellationToken.None).Wait();
                kv.Value.Dispose();
            }
            catch { /* Silence */ }
        }

        clientSockets.Clear();
    }

    private async Task SendManyMessages()
    {
        if (socket?.State == WebSocketState.Open && messageCount > 0)
        {
            receivedMessages.Clear();

            var startTime = DateTime.UtcNow;

            for (int i = 0; i < messageCount; i++)
            {
                var msg = new MessageInfoWebSocket
                {
                    Id = Guid.NewGuid(),
                    SentContent = messageText,
                    SentAt = DateTime.UtcNow
                };

                var json = JsonSerializer.Serialize(msg);
                var bytes = Encoding.UTF8.GetBytes(json);
                await socket.SendAsync(new ArraySegment<byte>(bytes), WebSocketMessageType.Text, true, CancellationToken.None);

                // Réception
                using var stream = new MemoryStream();
                var buffer = new byte[1024 * 4];
                WebSocketReceiveResult result;
                do
                {
                    result = await socket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                    stream.Write(buffer, 0, result.Count);
                } while (!result.EndOfMessage);

                stream.Position = 0;
                var jsonResponse = Encoding.UTF8.GetString(stream.ToArray());
                var received = JsonSerializer.Deserialize<MessageInfoWebSocket>(jsonResponse);

                if (received != null)
                {
                    lock (listLock)
                    {
                        receivedMessages.Insert(0, received);
                        if (receivedMessages.Count > 100)
                            receivedMessages.RemoveAt(receivedMessages.Count - 1);
                    }
                }

                await InvokeAsync(StateHasChanged);
            }

            var endTime = DateTime.UtcNow;
            totalSendDuration = endTime - startTime;
            await InvokeAsync(StateHasChanged);
        }
    }
}
